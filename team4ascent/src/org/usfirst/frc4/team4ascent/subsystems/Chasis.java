// RobotBuilder Version: 0.0.2
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.
package org.usfirst.frc4.team4ascent.subsystems;
import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import org.usfirst.frc4.team4ascent.RobotMap;
/**
 *
 */
public class Chasis extends Subsystem {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    Gyro gyro = RobotMap.chasisGyro;
    SpeedController leftFrontMotor = RobotMap.chasisLeftFrontMotor;
    SpeedController leftRearMotor = RobotMap.chasisLeftRearMotor;
    SpeedController rightFrontMotor = RobotMap.chasisRightFrontMotor;
    SpeedController rightRearMotor = RobotMap.chasisRightRearMotor;
    RobotDrive drive = RobotMap.chasisDrive;
    PIDController pid = RobotMap.chasisPID;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private double speed;
    double distancePerPulse;
    // Put methods for controlling this subsystem
    // here. Call these from Commands.
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
	
        // Set the default command for a subsystem here.
        //setDefaultCommand(new MySpecialCommand());
    }
    
//    public void tankdrive(Joystick left, Joystick right) {
//        drive.tankDrive(left, right);
//    }
    
    public void tankdrive(double left, double right) {
        drive.tankDrive(left, right);
    }
    
    public void stop() {
        drive.drive(0, 0);
    }
    
    public Chasis() {
        double Kp = Preferences.getInstance().getDouble("GyroP", 0);
        double Ki = Preferences.getInstance().getDouble("GyroI", 0);
        double Kd = Preferences.getInstance().getDouble("GyroD", 0);
        pid = new PIDController(Kp, Ki, Kd, gyro, leftFrontMotor);
        pid.setOutputRange(0, 360);
        pid.setContinuous(true);
        SmartDashboard.putData("Chasis Gyro", gyro);
    }
    
    public void resetGyro() {
        gyro.reset();
    }
    public void setSpeed(double speed) {
        this.speed = speed;
    }
    
    public void setAngleSetPoint(double angle) {
        pid.setSetpoint(angle);
    }
    
     public double getAngle() {	
        if((gyro.getAngle()%360+360)%360>180)	
            return (gyro.getAngle()%360-360)%360;	 	
        return (gyro.getAngle()%360+360)%360; 	
    }
     
    
    public void setAngleSetPointRelative(double angle) {
        pid.setSetpoint(pid.getSetpoint() + angle);
    }
}
